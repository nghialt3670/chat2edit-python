@startuml Chat2Edit Framework Class Diagram

!define ABSTRACT_CLASS abstract class
!define INTERFACE interface

' Layout direction for better width management
left to right direction

package "Core" {
    class Chat2Edit {
        - _llm: Llm
        - _context_provider: ContextProvider
        - _context_strategy: ContextStrategy
        - _prompting_strategy: PromptingStrategy
        - _execution_strategy: ExecutionStrategy
        - _callbacks: Chat2EditCallbacks
        - _config: Chat2EditConfig
        + generate(request, cycles, context)
        - _prompt(cycles)
        - _execute(code, context)
        - _get_response(chat_cycle, context)
    }

    class Chat2EditConfig {
        + max_prompt_cycles: int = 4
        + max_llm_exchanges: int = 2
    }

    class Chat2EditCallbacks {
        + on_request: Callable
        + on_prompt: Callable
        + on_answers: Callable
        + on_extract: Callable
        + on_blocks: Callable
        + on_execute: Callable
    }
}

package "Strategies" {
    ABSTRACT_CLASS ContextProvider {
        + get_context()
        + get_exemplars()
    }

    ABSTRACT_CLASS ContextStrategy {
        + contextualize_message()
        + contextualize_feedback()
        + decontextualize_message()
    }

    ABSTRACT_CLASS ExecutionStrategy {
        + parse(code)
        + process(code, context)
        + execute(code, context)
    }

    ABSTRACT_CLASS PromptingStrategy {
        + create_prompt()
        + get_refine_prompt()
        + extract_code(text)
    }

    ABSTRACT_CLASS Llm {
        + generate(prompt, history)
        + get_info()
    }
}

package "Models" {
    class TimestampedModel {
        + timestamp: int
    }

    class Message {
        + text: str
    }

    class Error {
        + message: str
        + stack_trace: str
    }

    class Feedback {
        + severity: str
        + function: str
    }

    class ChatMessage {
        + attachments: List
    }

    class ContextualizedMessage {
        + paths: List
    }

    class ExecutionFeedback {
        + attachments: List
    }

    class ContextualizedFeedback {
        + paths: List
    }

    class ExecutionError {
        + function: str
    }

    class PromptError {
        + llm: Dict
    }

    class LlmMessage {
        + text: str
    }

    class ChatCycle {
        + request: ContextualizedMessage
        + cycles: List[PromptCycle]
    }

    class PromptCycle {
        + exchanges: List
        + blocks: List
    }

    class PromptExchange {
        + prompt: LlmMessage
        + answers: List
        + error: PromptError
        + code: str
    }

    class ExecutionBlock {
        + generated_code: str
        + processed_code: str
        + is_executed: bool
        + feedback: ContextualizedFeedback
        + response: ContextualizedMessage
        + error: ExecutionError
        + logs: List
    }

    class Exemplar {
        + cycles: List
    }
}

package "Implementations" {
    class OpenAILlm {
        - _model: str
        - _system_message: str
        - _max_tokens: int
        - _temperature: float
        + set_api_key()
        + generate()
        + get_info()
    }

    class GoogleLlm {
        - _generation_config
        - _model
        + set_api_key()
        + generate()
        + get_info()
    }

    class DefaultContextStrategy {
        + contextualize_message()
        + contextualize_feedback()
        + decontextualize_message()
    }

    class DefaultExecutionStrategy {
        + parse(code)
        + process(code, context)
        + execute(code, context)
    }

    class OtcPromptingStrategy {
        + create_prompt()
        + get_refine_prompt()
        + extract_code(text)
        + filter_context()
        + create_context_code()
        + create_otc_sequences()
    }

    class CalculatorContextProvider {
        + get_context()
        + get_exemplars()
    }
}

package "Execution" {
    class "Attachment<T>" as Attachment {
        - __obj__: T
        - __basename__: str
        + __obj__
        + __basename__
        + __class__
    }

    class FeedbackException {
        + feedback
    }

    class ResponseException {
        + response
    }

    class SignalManager {
        - _signals
        + set_signal()
        + pop_signal()
    }

    class InvalidParameterTypeFeedback {
        + severity: str
        + function: str
        + parameter: str
        + expected_type: str
        + received_type: str
    }

    class ModifiedAttachmentFeedback {
        + severity: str
        + variable: str
        + attribute: str
    }

    class IgnoredReturnValueFeedback {
        + severity: str
        + function: str
        + value_type: str
    }

    class UnexpectedErrorFeedback {
        + severity: str
        + error
    }

    class IncompleteCycleFeedback {
        + severity: str
        + incomplete: bool
    }
}

package "Stubbing" {
    class ImportInfo {
        + names: Tuple
        + module: str
        + from_node()
        + from_obj()
    }

    class AssignInfo {
        + target: str
        + value: str
        + annotation: str
        + from_node()
    }

    class FunctionStub {
        + name: str
        + signature: str
        + coroutine: bool
        + docstring: str
        + decorators: List
        + from_node()
        + from_function()
        + generate()
    }

    class ClassStub {
        + name: str
        + bases: List
        + attributes: List
        + methods: List
        + from_node()
        + from_class()
        + generate()
    }

    class CodeStub {
        + mappings: Dict
        + blocks: List
        + from_module()
        + from_context()
        + generate()
    }

    ABSTRACT_CLASS CodeReplacer {
        + mappings: Dict
        + replace()
    }

    class AsyncCallCorrector {
        - async_functions: Set
        + visit_Call()
    }

    class AttributeReplacer {
        + visit_Assign()
        + visit_AnnAssign()
    }

    class MethodReplacer {
        + visit_FunctionDef()
    }

    class ParameterReplacer {
        + visit_FunctionDef()
    }
}

' Inheritance
TimestampedModel <|-- Message
TimestampedModel <|-- Error
TimestampedModel <|-- LlmMessage
Message <|-- Feedback
Message <|-- ChatMessage
Message <|-- ContextualizedMessage
Feedback <|-- ExecutionFeedback
Feedback <|-- ContextualizedFeedback
Error <|-- ExecutionError
Error <|-- PromptError

ContextualizedFeedback <|-- InvalidParameterTypeFeedback
ContextualizedFeedback <|-- ModifiedAttachmentFeedback
ContextualizedFeedback <|-- IgnoredReturnValueFeedback
ContextualizedFeedback <|-- UnexpectedErrorFeedback
ContextualizedFeedback <|-- IncompleteCycleFeedback

ContextProvider <|.. CalculatorContextProvider
ContextStrategy <|.. DefaultContextStrategy
ExecutionStrategy <|.. DefaultExecutionStrategy
PromptingStrategy <|.. OtcPromptingStrategy
Llm <|.. OpenAILlm
Llm <|.. GoogleLlm

CodeReplacer <|-- AttributeReplacer
CodeReplacer <|-- MethodReplacer
CodeReplacer <|-- ParameterReplacer

' Composition
Chat2Edit *-- Chat2EditConfig
Chat2Edit *-- Chat2EditCallbacks
Chat2Edit o-- ContextProvider
Chat2Edit o-- ContextStrategy
Chat2Edit o-- ExecutionStrategy
Chat2Edit o-- PromptingStrategy
Chat2Edit o-- Llm

ChatCycle *-- ContextualizedMessage
ChatCycle *-- PromptCycle
PromptCycle *-- PromptExchange
PromptCycle *-- ExecutionBlock
PromptExchange *-- LlmMessage
ExecutionBlock o-- ContextualizedFeedback
ExecutionBlock o-- ContextualizedMessage

ClassStub *-- AssignInfo
ClassStub *-- FunctionStub
CodeStub *-- ImportInfo

FeedbackException *-- ExecutionFeedback
ResponseException *-- ChatMessage
UnexpectedErrorFeedback *-- ExecutionError

' Usage
OtcPromptingStrategy ..> CodeStub
DefaultExecutionStrategy ..> AsyncCallCorrector

@enduml